# ---------------------------------------------
# Anchors for Common Configurations
# ---------------------------------------------
x-common:
  common_services: &common_services
    restart: always
    networks:
      - monitoring

  prometheus_healthcheck: &prometheus_healthcheck
    test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
    interval: 30s
    timeout: 10s
    retries: 3

  grafana_healthcheck: &grafana_healthcheck
    test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
    interval: 30s
    timeout: 10s
    retries: 3

  cadvisor_healthcheck: &cadvisor_healthcheck
    test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/metrics"]
    interval: 30s
    timeout: 10s
    retries: 3

  node_exporter_healthcheck: &node_exporter_healthcheck
    test: ["CMD", "wget", "-q", "--spider", "http://localhost:9100/metrics"]
    interval: 30s
    timeout: 10s
    retries: 3

# ---------------------------------------------
# Setup Main Monitoring Stack on STG01 
# ---------------------------------------------
services:
  prometheus:
    <<: *common_services
    image: ${PROMETHEUS_IMAGE}
    container_name: ${PROMETHEUS_CONTAINER_NAME}
    hostname: ${PROMETHEUS_CONTAINER_NAME}
    user: "nobody"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=1y'
      # /!\ Uncomment the following line to set a size limit for the Prometheus database /!\
      # - '--storage.tsdb.retention.size=10GB'
    expose:
      - 9090
    volumes:
      # /!\ To be modified depending on your needs /!\
      - prometheus-storage:/prometheus
      - ./prometheus:/etc/prometheus/
    depends_on:
      cadvisor:
        condition: service_healthy
      node-exporter:
        condition: service_healthy
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter
    healthcheck: *prometheus_healthcheck

  grafana:
    <<: *common_services
    image: ${GRAFANA_IMAGE}
    container_name: ${GRAFANA_CONTAINER_NAME}
    hostname: ${GRAFANA_CONTAINER_NAME}
    user: "472"
    ports:
      - "5001:3000"
    env_file:
      - ./grafana/.env
    volumes:
      # /!\ To be modified depending on your needs /!\
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck: *grafana_healthcheck

  cadvisor:
    <<: *common_services
    image: ${CADVISOR_IMAGE}
    container_name: ${CADVISOR_CONTAINER_NAME}
    hostname: ${CADVISOR_CONTAINER_NAME}
    privileged: true
    expose:
      - 8080
    command:
      - '-housekeeping_interval=15s'
      - '-docker_only=true'
      - '-store_container_labels=false'
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /etc/machine-id:/etc/machine-id:ro
    healthcheck: *cadvisor_healthcheck

  node-exporter:
    <<: *common_services
    image: ${NODE_EXPORTER_IMAGE}
    container_name: ${NODE_EXPORTER_CONTAINER_NAME}
    hostname: ${NODE_EXPORTER_CONTAINER_NAME}
    expose:
      - 9100
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /var/lib/docker:/var/lib/docker:ro
    healthcheck: *node_exporter_healthcheck

volumes:
  grafana-storage:
    name: grafana-storage
  prometheus-storage:
    name: prometheus-storage

networks:
  monitoring:
    name: monitoring
    driver: bridge

